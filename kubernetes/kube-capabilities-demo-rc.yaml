########################################################################
########################################################################
##
## TODO:
##
## - Update examples so they do not rely on McDonaldLand.info and
##   use local pods instead. Perhaps just a simple JSP that simply
##   logs everything passed to it via query string.
##
## - Set up cAdvisor (https://github.com/google/cadvisor)
##
## - Set up flume/kafka/flafka
##
## - Set up remote pages to control liveness and readiness probe
##   responses.
##
## - Set up remote kube pod (or another way to control via services).
##
## - Figure out how to illustrate blue-green deployments.
##
########################################################################
########################################################################

# This RC stands up pods that run the proof of concept itself.

apiVersion: v1
kind: ReplicationController

metadata:
  name: kube-capabilities-demo
  
  labels:
    name: kube-capabilities-demo
    env: demo
    
  annotations:
    # This means nothing - just here to show
    # we can attach things like this to build info.
    build: poc-0.1
    
spec:

  # Make sure we keep 3 pods up at all times.
  replicas: 1
  
  
  selector:
    name: kube-capabilities-demo
  
  template:
  
    metadata:      
      labels:
        name: kube-capabilities-demo
        env: demo
        
      annotations:
        # This means nothing - just here to show
        # we can attach things like this to build info.
        build: poc-0.1        
        
    spec:
    
      volumes:

      # Set up a gitRepo volume. This is the entire repo that
      # contains these files, web files, etc. but in reality
      # you'd want to work with something that is just what you
      # are wanting to deploy.
      - name: kube-capabilities-demo-git
        gitRepo:
          repository: https://github.com/finn0013/kube-capabilities-demo.git
          revision: master

      # Pull in some secret data (just because).
      - name: kube-capabilities-demo-secret
        secret:
          secretName: kube-capabilities-demo-secret
    
      containers:
      - name: kube-capabilities-demo
      
        # We are using a standard Tomcat image. 
        image: finn0013/tomcat-nano
      

        # This will start the server and allow for additional
        # commands to be tacked on. This is commented out though
        # as the best practice would be to let the container 
        # manage it's own start commands unless there is a need
        # to override. Any subsequent commands can be run via
        # lifecycle.postStart.exec.command 
        #command:
        #  - "catalina.sh"
        #  - "run"

        
        # Expose the standard http port so we can get to it.
        ports:
        - containerPort: 8080
        
        # Create a few environment variables to illustrate how it works.
        # You can check the variables by ssh-ing to the node then running:
        # docker exec -it [POD-ID] printenv
        # Note that using nsenter to get to the container will not expose
        # these environment variables.
        env:
        - name: ENV_INFO
          value: Value pulled from ENV variables.
        - name: ENV_INFO_2
          value: 2nd value pulled from ENV variables.

        # Mount the volumes defined for these pods.
        volumeMounts:
        
        # Mount our secrets.
        - name: kube-capabilities-demo-secret
          readOnly: true
          mountPath: /etc/kube-capabilities-demo/secrets
          
        # Mount our git repo volume.
        - name: kube-capabilities-demo-git
          readOnly: true
          mountPath: /etc/kube-capabilities-demo/git

        # This will check to see if a system is in a live state or
        # not. If not, it will be restarted.
        livenessProbe:
          httpGet:
            path: /kcd/liveCheck.jsp
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          
        # This will check to see if the system is responsive. If
        # it is not kube will stop allowing service requests until
        # it comes back to a responsive state.
        readinessProbe:
          httpGet:
            path: /kcd/readinessCheck.jsp
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          
        # Set up lifecycle hooks to invoke events upon the start and
        # stop of the container. 
        #
        # Examples for both exec and httpGet work but you can only use 
        # one at a time, per hook. If you really need to do both it would
        # be worth investigating an exec that invokes a url at the end, 
        # though you'd just need to ensure you had curl or an equivalent 
        # installed on the image.        
        #
        # This uses docker exec to run exec commands. When troubleshooting
        # ssh into the node then use docker exec to figure out what does and
        # doesn't work.
        lifecycle:    
          postStart:                 
            
            # Pull our git web files into the webapps directory so they are
            # available via http.
            exec:
              command:
              - cp
              - -R
              - /etc/kube-capabilities-demo/git/kube-capabilities-demo/web/demo
              - /usr/local/tomcat/webapps/kcd/

          preStop:
          
            # Showing how to call an external URL on start. This example
            # hits 'counter.php' to increment a count. Hit 'counter.txt'
            # to see the count and 'reset.php' to reset to 0.
            httpGet:
              path: /files/hitcount/counter.php
              port: 80
              host: www.mcdonaldland.info