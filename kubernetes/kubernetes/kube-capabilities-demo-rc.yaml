apiVersion: v1
kind: ReplicationController

metadata:
  name: kube-capabilities-demo
  
  labels:
    name: kube-capabilities-demo
    env: demo
    
  annotations:
    # This means nothing - just here to show
    # we can attach things like this to build info.
    build: poc-0.1
    
spec:

  # Make sure we keep 3 pods up at all times.
  replicas: 3
  
  
  selector:
    name: kube-capabilities-demo
  
  template:
  
    metadata:      
      labels:
        name: kube-capabilities-demo
        env: demo
        
      annotations:
        # This means nothing - just here to show
        # we can attach things like this to build info.
        build: poc-0.1        
        
    spec:
    
#      volumes:

      # Set up a gitRepo volume.
#      - name: kube-capabilities-demo-git
#        gitRepo:
#          repository: https://github.com/finn0013/test/git
#          revision: master

      # Pull in some secret data (just because).
#      - name: kube-capabilities-demo-secret
#        secret:
#          secretName: kube-capabilities-demo-secret
    
      containers:
      - name: http-kube-capabilities-demo
      
        # We are using a standard Tomcat image. 
# TODO: UPDATE TO USE TOMCAT WITH NANO        
        image: finn0013/httpd-nano
        
        # On start of the container pull the Git repo information in
        # to the public html directory so we can serve it.
#        comand:
#        - "TODO TODO TODO TODO TODO TODO TODO TODO TODO"

        # Set the start directory to the public html path.
#        workingDir: /usr/local/apache2/htdocs
        
        # Expose the standard http port so we can get to it.
        ports:
        - containerPort: 80
        
        # Create a few environment variables to illustrate how it works.
#        env:
#        - name: ENV_INFO
#          value: Value pulled from ENV variables.
#        - name: ENV_INFO_2
#          value: 2nd value pulled from ENV variables.

        # Mount the volumes defined for these pods.
#        volumeMounts:
        
        # Mount our secreats.
#        - name: kube-capabilities-demo-secret
#          readOnly: true
#          mountPath: /etc/kube-capabilities-demo/secrets
          
        # Mount our git repo volume.
#        - name: kube-capabilities-demo-git
#          readOnly: true
#          mountPath: / etc/kube-capabilities-demo/git

        # Set up a probe to check whether the system is live or not.
        # Set up here just to demonstrate the concept.
#        livenessProbe:
#          httpGet:
#            path: /livecheck.jsp
#            port: 80
#          initialDelaySeconds: 30
#          timeoutSeconds: 5
          
        # Set up a probe to check whether the system is ready or not.
        # Set up here to just demonstrate the concept.
#        readinessProbe:
#          httpGet:
#            path: /livecheck.html
#            port: 80
#          initialDelaySeconds: 30
#          timeoutSeconds: 5
          
        # Set up lifecycle hooks to invoke events upon the start and
        # stop of the container.
#        lifecycle:
#          postStart:
#            exec:
#              command: "DO SOMETHING"
#          preStop:
#            exec:
#              command: "DO SOMETHING"          
        
# FUTURE TODO:
# Set up cAdvisor (https://github.com/google/cadvisor)
# Figure out how to mount a kafka/flume/flafka container, a mongo container, and use an emptyDir volume to tie them together with the web container.